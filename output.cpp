//#include <string>
//#include <chrono>
//#include <format>
#include "output.h"
#include <iostream> // For standard input and output
#include <time.h>   // For time(), gmtime(), localtime(), asctime()...
#include <fstream>  // For ofstream file
#include <sstream>  // For stringstreams
#include <math.h>   // For log()

//using namespace std::chrono;

static std::string startHTML = "<!DOCTYPE html><html><style>table{font-family: arial, sans-serif;border-collapse: collapse;width: 60%;table-layout: fixed;background-color:#e7e7e7;}td,th{border: 1px solid #dddddd;text-align: center;padding: 8px;width: 50%;}</style><body style=\"background-color:#a2b9c2\"><h1 style=\"text-align:center\">Storing devices report</h1><br><p style=\"text-align: center;\">Report auto-generated with information about USBs connected to this computer since startup, including times when they were connected and disconnected, if that is the case. The information from this devices is gathered from Linux event logs.</p><p style=\"text-align: center;\">It also displays information about the hard drives connected to the computer, getting the information of these with ioctl Linux tool.</p><br><br><br><br><br><h2 style=\"text-align:center\">USBs</h2>";
//static std::string startHTML2 = "<!DOCTYPE html><html><style>table{font-family: arial, sans-serif;border-collapse: collapse;width: 60%%;table-layout: fixed;background-color:#e7e7e7;}td,th{border: 1px solid #dddddd;text-align: center;padding: 8px;width: 50%;}</style><body style=\"background-color:#a2b9c2\"><h1 style=\"text-align:center\">Storing devices report</h1><br><p style=\"text-align: center;\">Report auto-generated with information about USBs connected to this computer since startup, including times when they were connected and disconnected, if that is the case. The information from this devices is gathered from Linux event logs.</p><p style=\"text-align: center;\">It also displays information about the hard drives connected to the computer, getting the information of these with ioctl Linux tool.</p><br><h2 style=\"text-align:center\">USBs</h2><p style=\"text-align: right;\">Report generated by ____ tool developed by j0sem1 as part of ____ Master's thesis.</p></body></html>";
static std::string beforeHardDisks = "<br><br><br><h2 style=\"text-align:center\">Hard drives</h2>";
static std::string endHTML = "<br><br><br><p style=\"text-align: right;\">Report generated by ____ tool developed by j0sem1 as part of ____ Master's thesis.</p></body></html>";

static std::string usb_connected = "red;\">Not connected";
static std::string usb_serial_number = "Serial number not found";
static std::string usb_product_name = "Product name not found";
static std::string usb_manufacturer = "Manufacturer not found";
static std::string usb_vendor_id = "Vendor ID not found";
static std::string usb_product_id = "Product ID not found";
static std::string usb_localtime_connection = "June 3, 2010";
static std::string usb_localtime_disconnection = "June 3, 2010";
static std::string usb_utc_connection = "June 3, 2010";
static std::string usb_utc_disconnection = "June 3, 2010";
static std::string usb_est_connection = "June 3, 2010";
static std::string usb_est_disconnection = "June 3, 2010";
static std::string disk_path = "Unknown disk";
static std::string disk_interface = "Interface not found";
static std::string disk_product = "Product not found";
static std::string disk_version = "Version not found";
static std::string disk_firmware_version = "Firmware not found";
static std::string disk_serial_number = "Serial number not found";
static std::string disk_size = "Size not found";

bool isDeviceStillConnected() {
    return true;
}

/*
void test() {

    auto utc = system_clock::now();
    auto berlin = zoned_time{"Europe/Berlin", utc};
    auto local  = zoned_time{current_zone(), berlin};
    auto utc2   = berlin.get_sys_time();
    std::cout << std::format("{:%F %T %Z}", utc) << '\n';
    std::cout << std::format("{:%F %T %Z}", berlin) << '\n';
    std::cout << std::format("{:%F %T %Z}", local) << '\n';
    std::cout << std::format("{:%F %T %Z}", utc2) << '\n';
    auto meet = zoned_time{"Europe/Berlin", local_days{2016y/July/Monday[1]} + 15h + 30min};
    std::cout << meet << '\n';
    std::cout <<  zoned_time{"America/New_York", meet} << '\n';

}
*/

void test2() {

    int c;
    //c is int variable used for receiving choice as input
    time_t sys_time,sys_time2;
    struct tm *local,*utc,*con_time;

    //con_time is used for converted time.
    sys_time=time(NULL);
    local=localtime(&sys_time);
    std::cout << "Local time \t" << asctime(local);

    sys_time2 = time(NULL);
    utc = gmtime(&sys_time2);
    std::cout << "\n UTC time \t" << asctime(utc);
    std::cout << "Please choose time zone from\n 1.Alaska \t 2.Central America \t 3.Greenland \t 4.Paris \t 5.Beijing\n";
    std::cin >> c;

    con_time = utc;

    switch(c) {
        case 1:
            con_time->tm_hour=utc->tm_hour-9;
            //time zone of alaska is -9.00
            std::cout<<"\n Time in Alaska is "<<asctime(con_time);
            break;

        case 2:
            con_time->tm_hour=utc->tm_hour-6;
            //time zone of Central America is -6.00
            std::cout<<"\n Time in Central America is "<<asctime(con_time);
            break;

        case 3:
            con_time->tm_hour=utc->tm_hour-3;
            //time zone of Greenland is -3.00
            std::cout<<"\n Time in Greenland is "<<asctime(con_time);
            break;

        case 4:
            con_time->tm_hour=utc->tm_hour+1;
            //time zone of Paris is +1.00
            std::cout<<"\n Time in Paris is "<<asctime(con_time);
            break;

        case 5:
            con_time->tm_hour=utc->tm_hour+8;
            //time zone of Beijing is +8.00
            std::cout<<"\n Time in Beijing is "<<asctime(con_time);
            break;
    }
}

// Get from: https://gist.github.com/haohaozaici/7fddba2d7f1038bd578cb6acf5c57ac0
// si - international system of units   
std::string humanReadableByteCount(unsigned long long bytes, bool si) {
    int unit = si ? 1000 : 1024;
    if (bytes < unit)
        return bytes + " B";
    int exp = (int) (log(bytes) / log(unit));
    std::string pre = ((std::string) (si ? "kMGTPE" : "KMGTPE"))[exp-1] + ((std::string) (si ? "" : "i"));
    char result[100];
    sprintf(result, "%.1llu %sB", bytes / (unsigned long long) pow(unit, exp), pre.c_str());
    return result;
}

void initializeUSBVariables() {
    usb_connected = "red;\">Not connected";
    usb_serial_number = "Serial number not found";
    usb_product_name = "Product name not found";
    usb_manufacturer = "Manufacturer not found";
    usb_vendor_id = "Vendor ID not found";
    usb_product_id = "Product ID not found";
}

void initializeUSBTimes() {
    usb_localtime_connection = "";
    usb_localtime_disconnection = "";
    usb_utc_connection = "";
    usb_utc_disconnection = "";
    usb_est_connection = "";
    usb_est_disconnection = "";
}

void initializeDiskVariables() {
    disk_path = "Unknown disk";
    disk_interface = "Interface not found";
    disk_product = "Product not found";
    disk_version = "Version not found";
    disk_firmware_version = "Firmware not found";
    disk_serial_number = "Serial number not found";
    disk_size = "Size not found";
}

void printHTML(std::map<std::string, usbInfo> usbs_map, std::map<std::string, hardDiskInfo> disks_map) {

    std::ofstream out("report.html");
    int usb_iterator = 1;
    std::map<std::string, usbInfo>::iterator usbs_it;
    std::list<std::string>::iterator it_time_connection;
    std::list<std::string>::iterator it_time_disconnection;
    std::map<std::string, hardDiskInfo>::iterator disks_it;
    bool at_least_one_disk_found = false;

    // 1. Define/write outside this function the html page start
    // Add to final string
    out << startHTML;

    /*
        USBs loop
    */
    for (usbs_it = usbs_map.begin(); usbs_it != usbs_map.end(); ++usbs_it) {

        // Make a loop for usbs
        // 2. Define/write outside this function the html usb table with fields set to Data not get/unknown
        // Fill variables with that data
        // Add to final string filling gaps with variables data

        if (usbs_it->second.idVendor) {
            usb_vendor_id = std::to_string(usbs_it->second.idVendor);
        }
        if (usbs_it->second.idProduct) {
            usb_product_id = std::to_string(usbs_it->second.idProduct);
        }
        if (usbs_it->second.productName != "") {
            usb_product_name = usbs_it->second.productName;
        }
        if (usbs_it->second.manufacturer != "" && usbs_it->second.manufacturer.find_first_not_of(' ') != std::string::npos) {
            usb_manufacturer = usbs_it->second.manufacturer;
        }
        if (usbs_it->second.serialNumber != "") {
            usb_serial_number = usbs_it->second.serialNumber;
        }
        if (usbs_it->second.connectionTimes.size() > usbs_it->second.disconnectionTimes.size()) {
            usb_connected = "green;\">Connected";
        }

        std::ostringstream usb_info_table_stringstream;
        usb_info_table_stringstream << "<table align=\"center\"><tr style=\"background-color:#dadada;\"><th style=\"font-size:20px;\">USB " << usb_iterator
            << "</th><th style=\"color: " << usb_connected   // TODO
            << "</th></tr><tr><td style=\"background-color:#dadada\"><b>Serial Number</b></td><td>" << usb_serial_number
            << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Product Name</b></td><td>" << usb_product_name
            << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Manufacturer</b></td><td>" << usb_manufacturer
            << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Vendor ID</b></td><td>" << usb_vendor_id
            << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Product ID</b></td><td>" << usb_product_id
            << "</td></tr></table>";
        std::string usb_info_table_string = usb_info_table_stringstream.str();

        out << usb_info_table_string;

        /*
            USB times
        */
        std::string usb_all_times_only = "";

        it_time_connection = usbs_it->second.connectionTimes.begin();
        it_time_disconnection = usbs_it->second.disconnectionTimes.begin();

        while (it_time_connection != usbs_it->second.connectionTimes.end()) {

            usb_localtime_connection = (*it_time_connection);
            usb_utc_connection = (*it_time_connection);
            usb_est_connection = (*it_time_connection);

            if (it_time_disconnection != usbs_it->second.disconnectionTimes.end()) {
                usb_localtime_disconnection = (*it_time_disconnection);
                usb_utc_disconnection = (*it_time_disconnection);
                usb_est_disconnection = (*it_time_disconnection);
                it_time_disconnection++;
            }
            it_time_connection++;

            std::ostringstream usb_individual_time_table_stringstream;
            usb_individual_time_table_stringstream << "<tr>"
            << "<td><time>" << usb_localtime_connection << "</time></td>"
            << "<td><time>" << usb_localtime_disconnection << "</time></td>"
            << "<td><time>" << usb_utc_connection << "</time></td>"
            << "<td><time>" << usb_utc_disconnection << "</time></td>"
            << "<td><time>" << usb_est_connection << "</time></td>"
            << "<td><time>" << usb_est_disconnection << "</time></td>"
            << "</tr>";
            std::string usb_individual_time_table_string = usb_individual_time_table_stringstream.str();
            usb_all_times_only = usb_all_times_only + usb_individual_time_table_string;

            initializeUSBTimes();

        }

        std::ostringstream usb_all_times_table_stringstream;
        
        std::string usb_times_table_string = 
            "<p style=\"text-align: center;\">Connection and disconnection times in different time zones:</p><table align=\"center\"><tr><th colspan=\"2\" style=\"background-color:#dadada\">Local time</th><th colspan=\"2\" style=\"background-color:#dadada\">UTC</th><th colspan=\"2\" style=\"background-color:#dadada\">EST</th></tr><tr><th style=\"background-color:#dadada\"><b>Conections</b></th><th style=\"background-color:#dadada\"><b>Disconnections</b></th><th style=\"background-color:#dadada\"><b>Conections</b></th><th style=\"background-color:#dadada\"><b>Disconnections</b></th><th style=\"background-color:#dadada\"><b>Conections</b></th><th style=\"background-color:#dadada\"><b>Disconnections</b></th></tr>"
            +
            usb_all_times_only
            +
            "</table><br><br><br><br>";

        out << usb_times_table_string;

        usb_iterator++;

        initializeUSBVariables();

    }

    out << beforeHardDisks;

    /*
        Disks loop
    */
    for (disks_it = disks_map.begin(); disks_it != disks_map.end(); ++disks_it) {

        // Make a loop for disks
        // 3. Define/write outside this function the html disks table with fields set to Data not get/unknown
        // Fill variables with that data
        // Add to final string filling gaps with variables data

        if (!disks_it->second.isEmpty) {

            at_least_one_disk_found = true;

            disk_path = disks_it->first;
            disk_interface = disks_it->second.diskType;
            if (disks_it->second.product != "") {
                disk_product = disks_it->second.product;
            }
            if (disks_it->second.version != "") {
                disk_version = disks_it->second.version;
            }
            if (disks_it->second.firmware != "") {
                disk_firmware_version = disks_it->second.firmware;
            }
            if (disks_it->second.serialNumber != "") {
                disk_serial_number = disks_it->second.serialNumber;
            }
            if (disks_it->second.size != 0) {
                disk_size = humanReadableByteCount(disks_it->second.size, true);
            }

            std::ostringstream disk_info_table_stringstream;
            disk_info_table_stringstream << "<table align=\"center\"><tr style=\"background-color:#dadada\"><th style=\"font-size:20px;\">" << disk_path
            << "</th><th></th></tr><tr><td style=\"background-color:#dadada\"><b>Disk interface</b></td><td>" << disk_interface
            << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Product</b></td><td>" << disk_product
            << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Version</b></td><td>" << disk_version
            << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Firmware version</b></td><td>" << disk_firmware_version
            << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Serial number</b></td><td>" << disk_serial_number
            << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Size</b></td><td>" << disk_size
            << "</td></tr></table><br><br><br><br>";
            std::string disk_info_table_string = disk_info_table_stringstream.str();

            out << disk_info_table_string;

        }

        initializeDiskVariables();

    }

    if (!at_least_one_disk_found) {
        out << "<p style=\"text-align: center;\">Disks info not found.</p>";
    }

    out << endHTML;

    out.close();
}

void printHTML_first() {

    std::ofstream out("report.html");

    int usb_iterator = 1;

    // 1. Define/write outside this function the html page start
    // Add to final string
    out << startHTML;

    // Make a loop for usbs
    // 2. Define/write outside this function the html usb table with fields set to Data not get/unknown
    // Fill variables with that data
    // Add to final string filling gaps with variables data

    std::ostringstream usb_info_table_stringstream;
    usb_info_table_stringstream << "<table align=\"center\"><tr style=\"background-color:#dadada;\"><th style=\"font-size:20px;\">USB " << usb_iterator
        << "</th><th style=\"color: red;\">" << usb_connected
        << "</th></tr><tr><td style=\"background-color:#dadada\"><b>Serial Number</b></td><td>" << usb_serial_number
        << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Product Name</b></td><td>" << usb_product_name
        << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Manufacturer</b></td><td>" << usb_manufacturer
        << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Vendor ID</b></td><td>" << usb_vendor_id
        << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Product ID</b></td><td>" << usb_product_id
        << "</td></tr></table>";
    std::string usb_info_table_string = usb_info_table_stringstream.str();

    out << usb_info_table_string;

    // Esto iría en un bucle, una it por hora (par de elementos en las listas conex/deconex)
    std::string usb_all_times_only = "";
    for (int i = 0; i < 3; i++) {
        std::ostringstream usb_individual_time_table_stringstream;
        usb_individual_time_table_stringstream << "<tr>"
        << "<td><time>" << usb_localtime_connection << "</time></td>"
        << "<td><time>" << usb_localtime_disconnection << "</time></td>"
        << "<td><time>" << usb_utc_connection << "</time></td>"
        << "<td><time>" << usb_utc_disconnection << "</time></td>"
        << "<td><time>" << usb_est_connection << "</time></td>"
        << "<td><time>" << usb_est_disconnection << "</time></td>"
        << "</tr>";
        std::string usb_individual_time_table_string = usb_individual_time_table_stringstream.str();
        usb_all_times_only = usb_all_times_only + usb_individual_time_table_string;
    }

    std::ostringstream usb_all_times_table_stringstream;
    
    std::string usb_times_table_string = 
        "<p style=\"text-align: center;\">Connection and disconnection times in different time zones:</p><table align=\"center\"><tr><th colspan=\"2\" style=\"background-color:#dadada\">Local time</th><th colspan=\"2\" style=\"background-color:#dadada\">UTC</th><th colspan=\"2\" style=\"background-color:#dadada\">EST</th></tr><tr><th style=\"background-color:#dadada\"><b>Conections</b></th><th style=\"background-color:#dadada\"><b>Disconnections</b></th><th style=\"background-color:#dadada\"><b>Conections</b></th><th style=\"background-color:#dadada\"><b>Disconnections</b></th><th style=\"background-color:#dadada\"><b>Conections</b></th><th style=\"background-color:#dadada\"><b>Disconnections</b></th></tr>"
        +
        usb_all_times_only
        +
        "</table>";

    out << usb_times_table_string;

    // Make a loop for disks
    // 3. Define/write outside this function the html disks table with fields set to Data not get/unknown
    // Fill variables with that data
    // Add to final string filling gaps with variables data

    out << beforeHardDisks;

    std::ostringstream disk_info_table_stringstream;
    disk_info_table_stringstream << "<table align=\"center\"><tr style=\"background-color:#dadada\"><th style=\"font-size:20px;\">" << disk_path
    << "</th><th></th></tr><tr><td style=\"background-color:#dadada\"><b>Disk interface</b></td><td>" << disk_interface
    << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Product</b></td><td>" << disk_product
    << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Version</b></td><td>" << disk_version
    << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Firmware version</b></td><td>" << disk_firmware_version
    << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Serial number</b></td><td>" << disk_serial_number
    << "</td></tr><tr><td style=\"background-color:#dadada\"><b>Size</b></td><td>" << disk_size
    << "</td></tr></table>";
    std::string disk_info_table_string = disk_info_table_stringstream.str();

    out << disk_info_table_string;

    out << endHTML;

    out.close();
}